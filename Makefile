# Project parameters.
export SRCDIR      ?= ./src
export DOCSDIR     ?= ./docs
export SCRIPTDIR   ?= ./script

# Installation parameters.
export prefix      ?= /usr/local
export exec_prefix ?= $(prefix)
export bindir      ?= $(exec_prefix)/bin
export libdir      ?= $(prefix)/lib
export datarootdir ?= $(prefix)/share
export mandir      ?= $(datarootdir)/man


########################################################################
#                                BUILD
########################################################################

.PHONY: build
build: man

# Generate ROFF format man pages.
#   from: $(SRCDIR)/man/*.ronn
#   to:   $(SRCDIR)/man/*
.PHONY: man
man: $(patsubst %.ronn,%,$(wildcard $(SRCDIR)/man/*.ronn)) ;

$(SRCDIR)/man/%: $(SRCDIR)/man/%.ronn
	ronn --warnings --roff '$<'

# Delete files generated by `build'.
.PHONY: clean
clean:
	-rm '$(patsubst %.ronn,%,$(wildcard $(SRCDIR)/man/*.ronn))'


########################################################################
#                                CHECK
########################################################################

.PHONY: check
check:
	bats '$(SRCDIR)/test'


########################################################################
#                                 DOCS
########################################################################

.PHONY: docs
docs: docs-man docs-img

# Generate HTML format man pages.
#   from: $(SRCDIR)/man/*.ronn
#   to:   $(DOCSDIR)/man/*.html
.PHONY: docs-man
docs-man: $(patsubst $(SRCDIR)/man/%.ronn,\
	             $(DOCSDIR)/man/%.html,\
	             $(wildcard $(SRCDIR)/man/*.ronn)) ;

$(DOCSDIR)/man/%.html: $(SRCDIR)/man/%.ronn
	ronn --warnings --html '$<'
	mv '$(<:.ronn=.html)' '$(DOCSDIR)/man'

# Rasterise HTML pages and save them in PNG format.
#   from: $(DOCSDIR)/src/*.html
#   to:   $(DOCSDIR)/img/*.png
.PHONY: docs-img
docs-img: $(patsubst $(DOCSDIR)/src/%.html,\
	             $(DOCSDIR)/img/%.png,\
	             $(wildcard $(DOCSDIR)/src/*.html)) ;

$(DOCSDIR)/img/%.png: $(DOCSDIR)/src/%.html
	phantomjs '$(SCRIPTDIR)/capture.js' '$<' '$@'

# Delete files generated by `docs'.
.PHONY: docs-clean
docs-clean:
	# Delete generated HTML format man pages (docs-man).
	-rm '$(patsubst $(SRCDIR)/man/%.ronn,$(DOCSDIR)/man/%.html,\
	                $(wildcard $(SRCDIR)/man/*.ronn))'

	# Delete generated PNG images (docs-img).
	-rm '$(patsubst $(DOCSDIR)/src/%.html,$(DOCSDIR)/img/%.png,\
	                $(wildcard $(DOCSDIR)/src/*.html))'


########################################################################
#                               INSTALL
########################################################################

.PHONY: install
install:
#	Sumamry.
	@echo '-> Parameters'; \
	vars=(SRCDIR DESTDIR prefix exec_prefix bindir libdir datarootdir \
	      mandir); \
        for var in "$${vars[@]}"; do \
	  printf '  %-11s = %s\n' "$${var}" "$${!var}"; \
	done; \
	echo

	@echo '-> Installing files'

#	Install executables.
#	  from: $(SRCDIR)/bin/*
#	  to  : $(DESTDIR)$(bindir)/*
	@for src in '$(SRCDIR)/bin'/*; do \
	  src_file="$$(basename "$${src}")"; \
	  dst='$(DESTDIR)$(bindir)/'"$${src_file}"; \
	  echo "  $${dst}"; \
	  install -Dm755 "$${src}" "$${dst}"; \
	done

#	Install libraries (recursively).
#	  from: $(SRCDIR)/lib/*
#	  to:   $(DESTDIR)$(libdir)/*
	@src_base='$(SRCDIR)/lib'; \
	IFS=$$'\n'; \
	for src in $$(find "$${src_base}" -type f); do \
	  dst='$(DESTDIR)$(libdir)'"$${src#$${src_base}}"; \
	  echo "  $${dst}"; \
	  install -Dm644 "$${src}" "$${dst}"; \
	done

#	Install man pages.
#	  from: ./$(SRCDIR)/man/*.[0-9]
#	  to:   $(DESTDIR)$(mandir)/*.[0-9]
	@for src in '$(SRCDIR)/man'/*.[0-9]; do \
	  src_file="$$(basename "$${src}")"; \
	  dst='$(DESTDIR)$(mandir)/man'"$${src_file: -1}/$${src_file}"; \
	  echo "  $${dst}"; \
	  install -Dm644 "$${src}" "$${dst}"; \
	done


########################################################################
#                                 HELP
########################################################################

define HELP_TEXT
TARGETS:

  For packagers:
    build    build application
    install  install application
    check    run test suite
    clean    delete generated files
    help     display this help

  For developers:
    man      generate ROFF format man pages (build-time)
    docs     generate HTML format man pages and images (after editing man pages)


ENVIRONMENT:

  For packagers:
    The following variables customise installation. Their meaning is described
    in the GNU Make manual. [1] [2]

      DESTDIR     = /
      prefix      = /usr/local
      exec_prefix = $$(prefix)
      bindir      = $$(exec_prefix)/bin
      libdir      = $$(prefix)/lib
      datarootdir = $$(prefix)/share
      mandir      = $$(datarootdir)/man

  For developers:
    The following variables may only be interesting to developers.

      DOCSDIR = ./docs   directory containing documentation, e.g. HTML man pages
      SRCDIR  = ./src    path to directory containing the program source.


EXAMPLES:

  Build and then install execuatables in `/usr/bin', libraries in `/usr/lib' and
  man pages in `/usr/share/man'.

    $ make build
    $ make prefix='/usr' install


REFERENCES:

  [1]: http://www.gnu.org/software/make/manual/make.html#Directory-Variables
  [2]: http://www.gnu.org/software/make/manual/make.html#DESTDIR

endef
export HELP_TEXT
.PHONY: help
help:
	@echo "$${HELP_TEXT}"
