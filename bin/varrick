#!/usr/bin/bash

#
# Copyright (C)  2015  Zoltan Vass <zoltan (dot) tombol (at) gmail (dot) com>
#
# This file is part of Varrick.
#
# Varrick is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Varrick is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Varrick.  If not, see <http://www.gnu.org/licenses/>.
#


################################################################################
#                               CHECK ENVIRONMENT
################################################################################

# Make sure we will not mask or overwrite environment variables.
if [ -n "${!_d8e1_*}" ]; then
  echo "Error: no variable with the prefix \`_d8e1_' should exist in the environment!"
  printf "%s\n" "${!_d8e1_@}"
  exit 2
fi

# NOTE: Make sure to prefix the name of every global variable (including
#       non-local function variables), and local variables in functions that
#       access environment variables.


################################################################################
#                            HELP, USAGE AND VERSION
################################################################################

print_version () {
  local version='0.1.0'
  echo "Varrick v$version"
}

print_usage () {
  print_version
  cat<<EOUSAGE
Usage: varrick [OPTIONS] TEMPLATE [DESTINATION]
       ... | varrick [OPTIONS] [DESTINATION]
       varrick [OPTIONS] < TEMPLATE [> DESTINATION]
See \`varrick --help' for more.
EOUSAGE
}

print_help () {
  print_version
  cat<<EOHELP
Usage:
  varrick [OPTIONS] TEMPLATE [DESTINATION]
  ... | varrick [OPTIONS] [DESTINATION]
  varrick [OPTIONS] < TEMPLATE [> DESTINATION]

Description:
  Varrick is a template engine. It substitutes references of the form \`\$var'
  and \`\${var}' with environment variables. It uses \`envsubst' internally
  while adding convenient features such as escaping support.

  By default, Varrick expands a reference to an undefined variable to the empty
  string. This can be changed with \`-e' or \`-m'.

Arguments:
  TEMPLATE
    Template file to expand. Can be read from STDIN if not specified.

  DESTINATION
    Where to put the expanded template. In case the given path is an existing
    directory, the output is saved in that directory. The filename is the
    template's filename, unless it ends with \`.tmpl' suffix in which case the
    suffix is removed. Otherwise the destination is interpreted as a file and
    the result is saved at the given path. In-place expansion is supported when
    specifying a file path. Parent directories have to exist. Defaults to
    STDOUT.

Options:
  -c, --check
    Look for invalid escape sequences and exit.

  -e, --no-expand
    Do not expand variables that are not defined. Mutually exclusive with \`-m'.

  -m, --missing
    Report undefined variables and exit. Mutually exclusive with \`-e'.

  -p, --preprocess
    Escape input if it contains variable references and exit. Otherwise, leave
    it unmodified.

  -s, --summary
    Print a list of referenced and escaped variables and exit.

  -x, --escape
    Allow escaping variable references with a backslash. See the \`Escaping'
    section below.

Escaping:
  Variable references can be escaped to prevent expansion using a slash \`\\'.

    $ export name=value
    $ echo '\\\$name' | varrick
    \$name

  If a slash appears in a non-escping position, i.e. not immediately before a
  variable reference, it has to be escaped.

    $ echo 'text \\\\ text' | varrick
    text \\ text

  When turning a file into template, it is recommended to first escape all
  slashes before inserting variable references.

    $ sed 's/\\\\/\\\\\\\\/g' < config.conf > config.tmpl

  Escaping slashes in the substituted values is not necessary.

Caveat:
  Varrick exits with an error when a variable starting with the prefix
  \`_d81e_' is declared in the environment. This is due to the fact that such
  variables are used internally and allowing them in the environment would cause
  incosistent behaviour and hard to find errors.

Exit status:
  Varrick exits with 0 on success. When an error is detected the exit status is
  1. When the internally used variable name prefix appears in the environment
  Varrick exits with 2 (see \`Caveat' section).

Bugs:
  Report bugs on Varrick's GitHub issue tracker at
  <https://github.com/ztombol/varrick/issues>.

Copyright:
  Copyright (C) 2015 Zoltan Vass <zoltan (dot) tombol (at) gmail (dot) com>
  Licensed under GNU GPL version 3 <https://gnu.org/licenses/gpl.html>.

See also:
  envsubst(1)

EOHELP
}


################################################################################
#                                 HANDLE OPTIONS
################################################################################

# Default options
_d8e1_OPT_CHECK=0
_d8e1_OPT_EXPAND=0
_d8e1_OPT_MISSING=0
_d8e1_OPT_PREPROCESS=0
_d8e1_OPT_SUMMARY=0
_d8e1_OPT_ESCAPE=0

# Parse options.
_d8e1_TEMP=$(getopt \
  --options c,e,h,m,p,s,u,v,x \
  --long check,escape,help,missing,no-expand,preprocess,summary,usage,version \
  --name "varrick" -- "$@")

if [ $? != 0 ]; then echo "Terminating..." >&2; exit 1; fi
eval set -- "$_d8e1_TEMP"

while true; do
  case "$1" in
    -c|--check) _d8e1_OPT_CHECK=1; shift;;
    -e|--no-expand) _d8e1_OPT_EXPAND=1; shift;;
    -h|--help) print_help; exit 0; shift;;
    -m|--missing) _d8e1_OPT_MISSING=1; shift;;
    -p|--preprocess) _d8e1_OPT_PREPROCESS=1; shift;;
    -s|--summary) _d8e1_OPT_SUMMARY=1; shift;;
    -u|--usage) print_usage; exit 0; shift;;
    -v|--version) print_version; exit 0; shift;;
    -x|--escape) _d8e1_OPT_ESCAPE=1; shift;;
    --) shift; break;;
    *) echo "Internal error!"; exit 1;;
  esac
done

# Options --missing and --no-expand are mutually exclusive.
if [ "$_d8e1_OPT_MISSING" -eq 1 ] && [ "$_d8e1_OPT_EXPAND" -eq 1 ]; then
  echo "Error: \`--missing' (-m) and \`--no-expand' (-e) are mutually exclusive!"
  exit 1
fi


################################################################################
#                                HANDLE ARGUMENTS
################################################################################

unset _d8e1_DEST
_d8e1_INPUT_SRC="$(stat -L --printf=%F /proc/$$/fd/0)"
if [ "$_d8e1_INPUT_SRC" == 'character special file' ]; then
  # Template read from file.
  if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    print_usage
    exit 1
  fi

  # If output is a directory, use the input file's name w/o the `.tmpl' suffix.
  if [ "$#" -eq 2 ]; then
    _d8e1_DEST="$( [ -d "$2" ] && echo "$2/$(basename "${1%.tmpl}")" \
                               || echo "$2" )"
  fi

  if [ ! -e "$1" ]; then
    echo "Error: no such file \`$1'"
    exit 1
  fi
  _d8e1_INPUT="$(cat "$1")"
else
  # Template read from STDIN.
  if [ "$#" -gt 1 ]; then
    print_usage
    exit 1
  fi

  if [ "$#" -eq 1 ]; then
    if [ -d "$1" ]; then
      echo "Error: destination cannot be a directory when reading the template from STDIN!"
      exit 1
    fi
    _d8e1_DEST="$1"
  fi

  _d8e1_INPUT="$(cat)"
fi


################################################################################
#                                      MAIN
################################################################################

# Load libraries.
_d8e1_LIB_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../lib/varrick" && pwd)"
. "$_d8e1_LIB_DIR/zhu-li.sh"

# Handle options.
if [ "$_d8e1_OPT_SUMMARY" -eq 1 ]; then
  if [ "$_d8e1_OPT_ESCAPE" -eq 1 ]; then
    _d8e1_ESCAPED=( $(get_escaped "$_d8e1_INPUT") )
    if [ "$?" -eq 0 ]; then
      echo "Escaped variables:"
      printf "%s\n" "${_d8e1_ESCAPED[@]}"
    fi
  fi
  _d8e1_REFERENCED=( $(get_referenced "$_d8e1_INPUT" $_d8e1_OPT_ESCAPE) )
  if [ "$?" -eq 0 ]; then
    echo "Referenced variables:"
    printf "%s\n" "${_d8e1_REFERENCED[@]}"
  fi
  exit 0
fi

if [ "$_d8e1_OPT_CHECK" -eq 1 ]; then
  check_esc "$_d8e1_INPUT"
  exit $?
fi

if [ "$_d8e1_OPT_MISSING" -eq 1 ]; then
  _d8e1_MISS=( $(get_missing "$_d8e1_INPUT") )
  if [ "$?" -eq 0 ]; then
    echo "Error: the variables below are referenced but not defined!"
    printf "%s\n" "${_d8e1_MISS[@]}"
    exit 1
  fi
fi

unset _d8e1_SHELL_FORMAT
if [ "$_d8e1_OPT_EXPAND" -eq 1 ]; then
  _d8e1_DEFINED=( $(get_defined "$_d8e1_INPUT") )
  if [ "$?" -eq 0 ]; then
    _d8e1_SHELL_FORMAT="$(printf '$%s' "${_d8e1_DEFINED[@]}")"
  else
    _d8e1_SHELL_FORMAT="''"
  fi
fi

if [ "$_d8e1_OPT_PREPROCESS" -eq 1 ]; then
  # Preprocess.
  _d8e1_OUTPUT="$(preprocess "$_d8e1_INPUT")"
else
  # Expand template.
  # Not quoting `$SHELL_FORMAT' allows not passing the argument if it's not set.
  if [ "$_d8e1_OPT_ESCAPE" -eq 1 ]; then
    escape_vars "$(get_defined "$_d8e1_INPUT")"
    _d8e1_OUTPUT="$(echo "$_d8e1_INPUT" | escape \
                                        | envsubst $_d8e1_SHELL_FORMAT \
                                        | unescape)"
  else
    _d8e1_OUTPUT="$(echo "$_d8e1_INPUT" | envsubst $_d8e1_SHELL_FORMAT)"
  fi
fi

# Output
[ "${_d8e1_DEST:-x}" != 'x' ] && echo "$_d8e1_OUTPUT" > "$_d8e1_DEST" \
                              || echo "$_d8e1_OUTPUT"
